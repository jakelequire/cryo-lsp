{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Cryo",
    "scopeName": "source.cryo",
    "patterns": [
        { "include": "#comments" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#keywords" },
        { "include": "#types" },
        { "include": "#functions" },
        { "include": "#variables" },
        { "include": "#punctuation" },
        { "include": "#operators" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                { "name": "comment.line.double-slash.cryo", "match": "//.*$" },
                { "name": "comment.block.cryo", "begin": "/\\*", "end": "\\*/" }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.cryo",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [{ "name": "constant.character.escape.cryo", "match": "\\\\." }]
                },
                {
                    "name": "string.quoted.single.cryo",
                    "begin": "'",
                    "end": "'",
                    "patterns": [{ "name": "constant.character.escape.cryo", "match": "\\\\." }]
                },
                {
                    "name": "string.template.cryo",
                    "begin": "`",
                    "end": "`",
                    "patterns": [
                        { "name": "constant.character.escape.cryo", "match": "\\\\." },
                        {
                            "name": "interpolation.punctuation.curly.begin.cryo",
                            "begin": "\\${",
                            "end": "}",
                            "patterns": [{ "include": "$self" }]
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.decimal.cryo",
                    "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
                },
                { "name": "constant.numeric.hexadecimal.cryo", "match": "\\b0[xX][0-9a-fA-F]+\\b" },
                { "name": "constant.numeric.binary.cryo", "match": "\\b0[bB][01]+\\b" },
                { "name": "constant.numeric.octal.cryo", "match": "\\b0[oO][0-7]+\\b" }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.cryo",
                    "match": "\\b(if|else|for|while|do|break|continue|return|async|await|switch|case|default|throw|try|catch|finally)\\b"
                },
                {
                    "name": "keyword.declaration.cryo",
                    "match": "\\b(let|const|mut|function|class|interface|enum|type|true|false|namespace|extern|static|import|export|extends|implements|public|private)\\b"
                },
                {
                    "name": "keyword.other.cryo",
                    "match": "\\b(as|from|of|in|new|null|this|super|typeof|instanceof|with)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.primitive.cryo",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(string|int|float|boolean|symbol|never|void|Array|Object|Function)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                }
            ],
            "settings": { "foreground": "#569cd6" }
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.cryo",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?=\\s*\\()"
                },
                {
                    "name": "support.function.cryo",
                    "match": "\\b(Object|Function)\\b"
                }
            ]
        },
        "variables": {
            "patterns": [
                { "name": "variable.language.cryo", "match": "\\b(this|super|arguments)\\b" },
                { "name": "variable.other.readwrite.cryo", "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b" }
            ]
        },
        "punctuation": {
            "patterns": [
                { "name": "punctuation.definition.parameters.cryo", "match": "[\\(\\)]" },
                { "name": "punctuation.definition.block.cryo", "match": "[\\{\\}]" },
                { "name": "punctuation.definition.array.cryo", "match": "[\\[\\]]" },
                { "name": "punctuation.separator.delimiter.cryo", "match": "[,;]" },
                { "name": "punctuation.separator.colon.cryo", "match": ":" },
                { "name": "punctuation.separator.dot.cryo", "match": "\\." }
            ]
        },
        "operators": {
            "patterns": [
                { "name": "keyword.operator.arithmetic.cryo", "match": "\\+|-|\\*|\\/|\\%|\\*\\*" },
                {
                    "name": "keyword.operator.assignment.cryo",
                    "match": "=|\\+=|-=|\\*=|\\/=|\\%=|\\*\\*="
                },
                { "name": "keyword.operator.comparison.cryo", "match": "==|!=|===|!==|>|<|>=|<=" },
                { "name": "keyword.operator.logical.cryo", "match": "&&|\\|\\||!" },
                { "name": "keyword.operator.bitwise.cryo", "match": "&|\\||\\^|~|<<|>>|>>>" }
            ]
        }
    }
}
